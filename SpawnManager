using Photon.Pun;
using System.Collections;
using System.Collections.Generic;
using UnityEngine;

/*This code generates spawnPoints for each player on the network when starting a game. 
The code is necessary since players should not start the game in the same place and it 
is necessary to keep a record and assign a different spawnPoint to each player.*/

public class SpawnManager : MonoBehaviourPunCallbacks
{
    public static SpawnManager instance;
    public Queue<int> spawnQueue = new Queue<int>();
    private GameObject playerSpawner;
    public Transform[] spawnPoints;
    private bool[] spawnPointsOccupied;
    private int[] spawnPointsOrder;
    private int newPlayer;

    // Start is called before the first frame update
    void Start()
    {
        //Initializing the list with the spawn points order for the players in the network.
        //Im using the array "spawnPoints" that contains the different spawn objects that I will use to get a position and rotation for each player.
        spawnPointsOrder = new int[spawnPoints.Length];

        if (PhotonNetwork.IsConnected)
        {
            //Get the player instance ID
            newPlayer = PhotonNetwork.LocalPlayer.ActorNumber;
            print("Player: " + newPlayer);

            //Adding the player to the queue, and sync with all the players on the network.
            photonView.RPC("PlayerList",RpcTarget.All,newPlayer);
        }

        //This timer is necessary to give all players time to join the queue.
        StartCoroutine(InstanceTimer());
    }

    [PunRPC]
    public void PlayerList(int myID)
    {
        spawnQueue.Enqueue(myID);
    }

    public IEnumerator InstanceTimer()
    {
        print("Timer starting");
        yield return new WaitForSeconds(2f);
        print("Timer finished");

        //Checking that there is at least one player in the game (added in the queue).
        if (spawnQueue.Count > 0)
        {
            //Calling the coroutine that generates the spawnPoints of each player and will assign them respectively.
            StartCoroutine(GenerateSpawnPoint());
        }
    }

    public IEnumerator GenerateSpawnPoint()
    {
        //The following code will assign the spawnPoints to the players (only the MasterClient must make the assignment).
        if (PhotonNetwork.IsMasterClient)
        {
            foreach (int playerInGame in spawnQueue)
            {
                //Generate a list of SpawnPoints that are still free.
                List<int> availableSpawnPoints = new List<int>();

                for (int i = 0; i < spawnPoints.Length; i++)
                {
                    if (spawnPointsOccupied[i] == false)
                    {
                        availableSpawnPoints.Add(i);
                    }
                }

                if (availableSpawnPoints.Count == 0)
                {
                    Debug.LogWarning("There are no spawn points available.");
                }

                //Randomly selecting the saved spawnPoint from the list of available spawnPoints.
                int randomIndex = Random.Range(0, availableSpawnPoints.Count);
                int spawnIndex = availableSpawnPoints[randomIndex];

                //Marking the selected spawnPoint as occupied.
                photonView.RPC("SpawnPointOccupied", RpcTarget.All, spawnIndex, playerInGame);
            }
        }

        //We have to wait a few seconds to ensure that players who do not enter the process of 
        //generating spawnPoints do not go ahead to instantiate their characters.
        yield return new WaitForSeconds(2f);

        foreach (int playerInGame in spawnQueue)
        {
            //Check if this PhotonView belongs to the player in turn.
            if (PhotonNetwork.LocalPlayer.ActorNumber == playerInGame)
            {
                //Find the PlayerSpawner code for this player.
                playerSpawner = GameObject.FindGameObjectWithTag("PlayerSpawner");
                PlayerSpawner pSpawnerScrypt = playerSpawner.GetComponent<PlayerSpawner>();

                if (pSpawnerScrypt != null)
                {
                    //Assign the spawnPoint corresponding to this player (that has the position and rotation for the character that will be instantiated)
                    //to the spawnPoint variable of the PlayerSpawner code. 
                    pSpawnerScrypt.spawnPoint = spawnPoints[spawnPointsOrder[playerInGame - 1]];

                    //Call the code that will instantiate this player's character.
                    pSpawnerScrypt.SpawnPlayer(1);
                }
                else
                {
                    Debug.LogWarning("PlayerSpawner script not found on player GameObject.");
                }
            }
        }
        spawnQueue.Clear();
    }
    
    [PunRPC]
    public void SpawnPointOccupied(int spawnIndex, int playerinGame)
    {
        //If not started, start the array of occupied spawnPoints
        if (spawnPointsOccupied == null)
        {
            spawnPointsOccupied = new bool[spawnPoints.Length];

            for (int i = 0; i < spawnPointsOccupied.Length; i++)
            {
                spawnPointsOccupied[i] = false;
            }
        }

        //Change the status of the selected spawnPoint to busy.
        spawnPointsOccupied[spawnIndex] = true;

        //Use the value of the spawnPointNumber saved in the spawnPoint transform and save it in the spawnPointsOrder array
        //[the player number in the network (1 is subtracted, since players start from "1", and arrays from "0")].
        spawnPointsOrder[playerinGame - 1] = spawnPoints[spawnIndex].GetComponent<spawnPointCode>().spawPointNumber;
    }
}